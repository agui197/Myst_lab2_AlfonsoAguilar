}
}
else { # No hubo capital
Historico[[j]]$Mensaje[i] <- "P"
Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
Historico[[j]]$Titulos[i] <-0
Historico[[j]]$Comisiones[i] <-0
Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]
Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos[i]+Historico[[j]]$Titulos_a[i-1]
Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
Historico[[j]]$Mensaje[i] <- "Capital insuficiente"
Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
}
}
# else if(Historico[[j]]$R_Precio[i] >= Regla6_V){ #aparece una se?al de venta
# # else if(Historico[[j]]$Titulos_a[i-1]*Historico[[j]]$Precio[i]>=Historico[[j]]$Balance[i-1]*(1+Regla6_V)+Historico[[j]]$Titulos_a*Historico[[j]]$Precio*Regla4_C){
#    if(Historico[[j]]$Titulos_a[i-1] > 0){ #Si hay acciones para vender
#       Historico[[j]]$Operacion[i] <- "Venta"
#       Historico[[j]]$Titulos[i] <-Historico[[j]]$Titulos_a[i-1]
#       venta <- Historico[[j]]$Precio[i]*Historico[[j]]$Titulos[i]
#       Historico[[j]]$Comisiones[i] <- venta*Regla4_C
#       Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]+Historico[[j]]$Comisiones[i]
#       Historico[[j]]$Titulos_a[i] <-0
#       Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
#       Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
#       Historico[[j]]$Mensaje[i] <- "Se hizo una venta"
#       Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
#    }
#    else{
#       Historico[[j]]$Mensaje[i] <- "Activos insuficientes"
#       Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
#       Historico[[j]]$Titulos[i] <-0
#       Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos[i]+Historico[[j]]$Titulos_a[i-1]
#       Historico[[j]]$Comisiones[i] <-0
#       Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]+Historico[[j]]$Comisiones[i]
#
#       Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
#       Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
#       Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
#    }
#  }
else { # Sin se?al
Historico[[j]]$Mensaje[i] <- "No hubo un rendimiento que activara la se?al"
Historico[[j]]$Operacion[i] <- "N/A"
Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
Historico[[j]]$Titulos[i] <-0
Historico[[j]]$Comisiones[i]<-0
Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]
Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos_a[i-1]
Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
}
}
}
names(Historico)<-c(names(DatosN))
win<-0
for(i in 1:length(DatosN)) {
if(rev(Historico[[i]]$R_Cuenta)[1]>rev(Historico[[i]]$R_Activo)[1]){
win<-win+1
}
}
results<-list()
results[[1]]<-Historico
results[[2]]<-win
return(results)
#return(win)
}
trading_strategy(Historico,-.035,.2,.2)
trading_strategy(Historico,.035,.2,.2)
trading_strategy(Historico,.01,.2,.2)
trading_strategy(Historico,.06,.2,.2)
trading_strategy(Historico,.01,.2,.2)
trading_strategy(Historico,.1,.2,.2)
trading_strategy <- function(Historico,ReglaR,ReglaI,ReglaP){
for(j in 1:length(tk_completos)){
Regla0_R <- ReglaR  # Considerar una oportunidad de compra en un rendimiento de -6% o menor.
Regla1_I <- ReglaI   # Porcentaje de capital para comprar titulos para posicion Inicial.
Regla2_P <- ReglaP   # Se utiliza el P% del L capital restante en cada compra.
Regla3_W <- tk_completos # Se realiza la misma estrategia para todos los activos en el portafolio.
Regla4_C <- 0.0025 # Comisiones pagadas por compra.
Regla5_K <- 100000 # Capital Inicial.
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
Regla6_V <- (.1)+2*(Regla4_C)
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Calcular los Titulos de posicion inicial
Historico[[j]]$Titulos[1] <- (Regla5_K*Regla1_I)%/%Historico[[j]]$Precio[1]
Historico[[j]]$Titulos_a[1]<-Historico[[j]]$Titulos[1]
# -- Se calculan comisiones iniciales
Historico[[j]]$Comisiones[1] <- Historico[[j]]$Titulos[1]*Historico[[j]]$Precio[1]*Regla4_C
Historico[[j]]$Comisiones_a[1] <- Historico[[j]]$Comisiones[1]
# --- Calcular el valor flotante de la posicion
Historico[[j]]$Flotante[1] <- Historico[[j]]$Titulos_a[1]*Historico[[j]]$Precio[1]
# -- Todo remanente se dejar? registrado en la cuenta de efectivo.
Historico[[j]]$Capital[1] <- Regla5_K-Historico[[j]]$Flotante[1]-Historico[[j]]$Comisiones[1]
# -- Calcular el Balance
Historico[[j]]$Balance[1] <- Historico[[j]]$Flotante[1]+Historico[[j]]$Capital[1]
# -- Iniciamos con una postura de mantener.
Historico[[j]]$Operacion[1] <- "Posicion Inicial"
# -- Mensaje inicial
Historico[[j]]$Mensaje[1] <- "Inicializacion de cartera"
for(i in 2:length(Historico[[j]]$Date)){
if(Historico[[j]]$R_Precio[i] <= Regla0_R){ # Generar Se?al
# Establecer capital actual, inicialmente, igual al capital anterior
Historico[[j]]$Capital[i] <- Historico[[j]]$Capital[i-1]
if(Historico[[j]]$Capital[i] > 0){ # Si hay capital
if(Historico[[j]]$Capital[i]*Regla2_P > Historico[[j]]$Precio[i]){ # Si Capital minimo
Historico[[j]]$Operacion[i] <- "Compra"
Historico[[j]]$Titulos[i]   <- (Historico[[j]]$Capital[i]*Regla2_P)%/%Historico[[j]]$Precio[i]
compra <- Historico[[j]]$Precio[i]*Historico[[j]]$Titulos[i]
Historico[[j]]$Comisiones[i] <- compra*Regla4_C
Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]+Historico[[j]]$Comisiones[i]
Historico[[j]]$Titulos_a[i] <- Historico[[j]]$Titulos[i-1]+Historico[[j]]$Titulos[i]
Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]-compra-Historico[[j]]$Comisiones[i]
Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos[i]+Historico[[j]]$Titulos_a[i-1]
Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
Historico[[j]]$Mensaje[i] <- "Se hizo una compra"
Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
}
}
else { # No hubo capital
Historico[[j]]$Mensaje[i] <- "P"
Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
Historico[[j]]$Titulos[i] <-0
Historico[[j]]$Comisiones[i] <-0
Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]
Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos[i]+Historico[[j]]$Titulos_a[i-1]
Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
Historico[[j]]$Mensaje[i] <- "Capital insuficiente"
Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
}
}
# else if(Historico[[j]]$R_Precio[i] >= Regla6_V){ #aparece una se?al de venta
# # else if(Historico[[j]]$Titulos_a[i-1]*Historico[[j]]$Precio[i]>=Historico[[j]]$Balance[i-1]*(1+Regla6_V)+Historico[[j]]$Titulos_a*Historico[[j]]$Precio*Regla4_C){
#    if(Historico[[j]]$Titulos_a[i-1] > 0){ #Si hay acciones para vender
#       Historico[[j]]$Operacion[i] <- "Venta"
#       Historico[[j]]$Titulos[i] <-Historico[[j]]$Titulos_a[i-1]
#       venta <- Historico[[j]]$Precio[i]*Historico[[j]]$Titulos[i]
#       Historico[[j]]$Comisiones[i] <- venta*Regla4_C
#       Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]+Historico[[j]]$Comisiones[i]
#       Historico[[j]]$Titulos_a[i] <-0
#       Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
#       Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
#       Historico[[j]]$Mensaje[i] <- "Se hizo una venta"
#       Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
#    }
#    else{
#       Historico[[j]]$Mensaje[i] <- "Activos insuficientes"
#       Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
#       Historico[[j]]$Titulos[i] <-0
#       Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos[i]+Historico[[j]]$Titulos_a[i-1]
#       Historico[[j]]$Comisiones[i] <-0
#       Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]+Historico[[j]]$Comisiones[i]
#
#       Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
#       Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
#       Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
#    }
#  }
else { # Sin se?al
Historico[[j]]$Mensaje[i] <- "No hubo un rendimiento que activara la se?al"
Historico[[j]]$Operacion[i] <- "N/A"
Historico[[j]]$Capital[i]<-Historico[[j]]$Capital[i-1]
Historico[[j]]$Titulos[i] <-0
Historico[[j]]$Comisiones[i]<-0
Historico[[j]]$Comisiones_a[i] <- Historico[[j]]$Comisiones_a[i-1]
Historico[[j]]$Titulos_a[i]<-Historico[[j]]$Titulos_a[i-1]
Historico[[j]]$Flotante[i] <- Historico[[j]]$Titulos_a[i]*Historico[[j]]$Precio[i]
Historico[[j]]$Balance[i] <- Historico[[j]]$Capital[i]+Historico[[j]]$Flotante[i]
Historico[[j]]$R_Cuenta[i]<-Historico[[j]]$Balance[i]/Regla5_K-1
}
}
}
names(Historico)<-c(names(DatosN))
win<-0
for(i in 1:length(DatosN)) {
if(rev(Historico[[i]]$R_Cuenta)[1]>=rev(Historico[[i]]$R_Activo)[1]){
win<-win+1
}
}
results<-list()
results[[1]]<-Historico
results[[2]]<-win
return(results)
#return(win)
}
trading_strategy(Historico,-.035,.2,.2)
trading_strategy(Historico,.1,.2,.2)
trading_strategy(Historico,.1,0,.2)
trading_strategy(Historico,-.035,0,.2)
trading_strategy(Historico,-.035,0,.3)
result<-trading_strategy(Historico,-.035,.1,.2)
plot_ly(Historico[[1]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
plot_ly(result[[1]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
result[[1]]
result[[1]][1]
plot_ly(result[[1]][1]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
View(result)
View(result[[1]][["CRM"]])
plot_ly(result[[1]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
for(k in 1:seq(length(DatosN))){
plot_ly(result[[k]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
#grafica de uno de los activos nada mas
for(k in 1:(length(DatosN))){
plot_ly(result[[k]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
#grafica de uno de los activos nada mas
for(k in 1:(length(DatosN))){
plot_ly(result[[1]][k]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
#grafica de uno de los activos nada mas
for(k in 1:(length(DatosN))){
plot_ly(result[[1]][k]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
plot_ly(result[[1]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
plot_ly(result[[1]][1]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
result[[1]][1]
result[[1]]$CRM
t<-result[[1]][1]
plot_ly(t) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
View(t)
View(t)
t<-result[[1]][[1]]
View(t)
for(k in 1:(length(DatosN))){
plot_ly(result[[1]][[k]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
for(k in 1:seq(length(DatosN))){
plot_ly(result[[1]][[k]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
for(k in 1:seq(length(50))){
plot_ly(result[[1]][[k]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
#grafica de uno de los activos nada mas
for(k in 1:seq(length(50))){
subplot(plot_ly(result[[1]][[k]])) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
for(k in 1:seq(50)){
plots[[k]]<-plot_ly(result[[1]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
for(k in 1:length(seq(50)) ){
plots[[k]]<-plot_ly(result[[1]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
plots<-list()
for(k in 1:length(seq(50)) ){
plots[[k]]<-plot_ly(result[[1]]$CRM) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
plots[[1]]
plots[[2]]
plots[[50]]
plots<-list()
for(k in 1:length(seq(50)) ){
plots[[k]]<-plot_ly(result[[1]][[k]]) %>%
add_trace(x = ~Date, y = ~round(R_Activo,4), type = 'scatter', mode = 'lines', name = 'Activo',
line = list(color = 'red')) %>%
add_trace(x = ~Date, y = ~round(R_Cuenta,4), type = 'scatter', mode = 'lines', name = 'Cuenta',
line = list(color = 'blue')) %>%
layout(title = "Rend del activo VS Rend de la cuenta",
xaxis = list(title = "Fechas", showgrid = T),
yaxis = list(title = "Rendimiento"),
legend = list(orientation = 'h', y = -0.25, x = 0.5))
}
plots[[2]]
plots[[3]]
plots[[4]]
plots[[5]]
plots[[6]]
plots[[7]]
plots[[8]]
plots[[9]]
plots[[10]]
rends<-c()
for(k in 1:length(DatosN)){
rends<-c(rends,result[[1]][[k]]$R_Cuenta)
}
rends
rends<-list()
for(k in 1:length(DatosN)){
rends[[k+]]<-result[[1]][[k]]$R_Cuenta
}
rends<-list()
for(k in 1:length(DatosN)){
rends[[k]]<-result[[1]][[k]]$R_Cuenta
}
View(rends)
rends<-list()
for(k in 1:length(DatosN)){
rends<-xts(cbind(result[[1]][[k]]$R_Cuenta))
}
rends<-list()
for(k in 1:length(DatosN)){
rends<-xts(cbind(x=result[[1]][[k]]$R_Cuenta))
}
rends<-c()
for(k in 1:length(DatosN)){
rends<-(cbind(rends,result[[1]][[k]]$R_Cuenta))
}
View(rends)
colnames(result[[1]][[1]])
rownames(result[[1]][[1]])
View(result)
View(result[[1]][["CRM"]])
rends<-c()
for(k in 1:length(DatosN)){
rends<-(cbind(rends,result[[1]][[k]]$R_Cuenta))
}
colnames(rends)<-tk_completos
rownames(rends)<-result[[1]][[1]]$Date
View(rends)
## Sortino
MAR =.005 #~6%/year
#'# Example 1 maximize Sortino Ratio
SortinoConstr <- constraint(assets = tk_completos, min = 0.05, max = 1, min_sum=.99, max_sum=1.01, weight_seq = generatesequence(by=.001))
SortinoConstr <- add.objective(constraints=SortinoConstr, type="return", name="SortinoRatio",  enabled=TRUE, arguments = list(MAR=MAR))
SortinoConstr <- add.objective(constraints=SortinoConstr, type="return", name="mean",  enabled=TRUE, multiplier=0) # multiplier 0 makes it availble for plotting, but not affect optimization
rends<-c()
for(k in 1:length(DatosN)){
rends<-(cbind(rends,result[[1]][[k]]$R_Cuenta))
}
colnames(rends)<-tk_completos
rownames(rends)<-result[[1]][[1]]$Date
### Use random portfolio engine
SortinoResult<-optimize.portfolio(R=rends, constraints=SortinoConstr, optimize_method='random', search_size=2000, trace=TRUE, verbose=TRUE)
plot(SortinoResult, risk.col='SortinoRatio')
SortinoConstr <- constraint(assets = tk_completos, min = 0.05, max = 1, min_sum=.99, max_sum=1.01, weight_seq = generatesequence(by=.001))
SortinoConstr <- constraint(assets = tk_completos,type = "leverage", min = 0.05, max = 1, min_sum=.99, max_sum=1.01, weight_seq = generatesequence(by=.001))
SortinoConstr <- add.objective(constraints=SortinoConstr, type="return", name="SortinoRatio",  enabled=TRUE, arguments = list(MAR=MAR))
SortinoConstr <- portfolio.spec(assets=tk)
SortinoConstr <- add.objective(constraints=SortinoConstr, type="return", name="SortinoRatio",  enabled=TRUE, arguments = list(MAR=MAR))
SortinoConstr <- add.objective(portfolio =SortinoConstr, constraints=SortinoConstr, type="return", name="SortinoRatio",  enabled=TRUE, arguments = list(MAR=MAR))
SortinoConstr <- add.objective(portfolio =SortinoConstr,constraints=SortinoConstr, type="return", name="mean",  enabled=TRUE, multiplier=0) # multiplier 0 makes it availble for plotting, but not affect optimization
rends<-c()
for(k in 1:length(DatosN)){
rends<-(cbind(rends,result[[1]][[k]]$R_Cuenta))
}
colnames(rends)<-tk_completos
rownames(rends)<-result[[1]][[1]]$Date
SortinoResult<-optimize.portfolio(R=rends,portfolio =SortinoConstr, constraints=SortinoConstr, optimize_method='random', search_size=2000, trace=TRUE, verbose=TRUE)
SortinoConstr <- add.constraint(assets = tk_completos,type = "leverage", min = 0.05, max = 1, min_sum=.99, max_sum=1.01, weight_seq = generatesequence(by=.001))
SortinoConstr <- add.constraint(portfolio =SortinoConstr,assets = tk_completos,type = "leverage", min = 0.05, max = 1, min_sum=.99, max_sum=1.01, weight_seq = generatesequence(by=.001))
SortinoResult<-optimize.portfolio(R=rends,portfolio =SortinoConstr, constraints=SortinoConstr, optimize_method='random', search_size=2000, trace=TRUE, verbose=TRUE)
View(SortinoConstr)
SortinoResult<-optimize.portfolio(R=rends,portfolio =SortinoConstr, constraints=SortinoConstr$constraints, optimize_method='random', search_size=2000, trace=TRUE, verbose=TRUE)
Port1 <- portfolio.spec(assets=tk)
Port1 <- add.constraint(portfolio = Port1,
type = "leverage",
min_sum=.99,max_sum=1.01)
# Restriccion 2: Limites superior e inferior para el valor de pesos
Port1 <- add.constraint(portfolio=Port1,
type="box",
min=c(0.01, 0.01, 0.01), max=c(0.7, 0.7, 0.7))
Port1 <- add.objective(portfolio=Port1, type="return", name="SotinoRatio")
Port1 <- optimize.portfolio(R=rends, portfolio=Port1, optimize_method="random",
trace=TRUE, search_size=500)
portfolio <- portfolio.spec(assets=tk_completos)
portfolio <- add.constraint(portfolio = portfolio, type="leverage",
min_sum=0.99, max_sum=1.01)
portfolio <- add.constraint(portfolio, type="position_limit", max_pos=8)
portfolio <- add.constraint(portfolio, type="box", min=0, max=0.5) # <-------
portfolio <- add.objective(portfolio, type="risk", name="SortinoRatio")
opt <- optimize.portfolio(R=rends, portfolio=portfolio, optimize_method="random")
